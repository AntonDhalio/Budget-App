@page "/"
@inject Data.BudgetRepository BudgetRepository

<div >
    @if (sections.Any())
    {
        <BudgetSummary Sections="@sections" BudgetItems="@items" IncomeItems="@incomeItems" ExpenseItems="@expenseItems"/>
        foreach(var section in sections)
        {
            <div class="section-item">
                <Section SectionData="section" OnUpdate="UpdateSection"/>
            </div>
        }
    }
    else
    {
        <p>Sure looks empty here! Maybe you should add a Section?</p>
    }
    <AddSection OnUpdateSection="UpdateSection"></AddSection>
</div>

@code {
    private IEnumerable<Budget> items = Enumerable.Empty<Budget>();
    private IEnumerable<Models.Section> sections = Enumerable.Empty<Models.Section>();
    private IEnumerable<Budget> incomeItems = Enumerable.Empty<Budget>();
    private IEnumerable<Budget> expenseItems = Enumerable.Empty<Budget>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task UpdateSection()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            sections = await FetchSections();
            items = await FetchBudgetItems();
            incomeItems = await FetchBudgetIncome();
            expenseItems = await FetchBudgetExpenses();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<Models.Section>> FetchSections()
    {
        return await BudgetRepository.GetAllSections(); 
    }
    
    private async Task<IEnumerable<Models.Budget>> FetchBudgetItems()
    {
        return await BudgetRepository.GetAllBudgetItems(); 
    }

    private async Task<IEnumerable<Models.Budget>> FetchBudgetIncome()
    {
        return await BudgetRepository.GetIncomeBudgetItems();
    }

    private async Task<IEnumerable<Models.Budget>> FetchBudgetExpenses()
    {
        return await BudgetRepository.GetExpenseBudgetItems();
    }
}