@page "/budget"
@inject Data.BudgetRepository BudgetRepository

@{
}

<div>
    <div class="page-title">
        <h1>Budget</h1>
    </div>

    @if (sections.Any())
    {
        <BudgetSummary Sections="@sections" BudgetItems="@items" />
        foreach(var section in sections)
        {
            <div class="section-item">
                <Section SectionData="section" OnUpdateSection="UpdateSection" OnUpdateAll="UpdateAll"/>
            </div>
        }
    }
    else
    {
        <p>Sure looks empty here! Maybe you should add a Section?</p>
    }
    <AddSection OnUpdateSection="UpdateSection"></AddSection>
</div>

@code {
    private IEnumerable<Budget> items = Enumerable.Empty<Budget>();
    private IEnumerable<Models.Section> sections = Enumerable.Empty<Models.Section>();

    protected override async Task OnInitializedAsync()
    {
        sections = await FetchSections();
        items = await FetchBudgetItems();
    }

    private async Task UpdateSection()
    {
        sections = await FetchSections();
        StateHasChanged();
    }

    private async Task UpdateAll(){
        sections = await FetchSections();
        items = await FetchBudgetItems();
        StateHasChanged();
    }

    private async Task<IEnumerable<Models.Section>> FetchSections()
    {
        return await BudgetRepository.GetAllSections(); 
    }
    
    private async Task<IEnumerable<Models.Budget>> FetchBudgetItems()
    {
        return await BudgetRepository.GetAllBudgetItems(); 
    }
}