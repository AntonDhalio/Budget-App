<div class="item">
    <div class="item-summary" @onclick="(BudgetItem.IsShared ? ToggleDetails : null)" style="@(BudgetItem.IsShared ? "cursor:pointer" : "cursor:default")">
        <div class="item-start">
            <Icon IconClass="@BudgetItem.IconName" IconColor="@IconColor"/>
            <div class="item-title">@BudgetItem.Name</div>
        </div>
        <div class="item-content">
            <div class="item-sum">@CalculateAmount() kr</div>
            <div class="item-shared">
                @if (@BudgetItem.IsShared == true)
                {
                    <i class="fas fa-solid fa-users" />
                }
                else
                {
                    <i class="fas fa-solid fa-user" />
                }
            </div>
        </div>
    </div>
    @if (showDetails)
    {
        <div class="shared-details">
            <div>Total Cost: @BudgetItem.Amount kr</div>
            <div>Percentage: @BudgetItem.SharedPercentage%</div>
            <div>User Cost: @CalculateAmount() kr</div>
            <button class="btn btn-outline-error border-0" type="button" @onclick="RemoveItem">
                <span class="oi oi-cross"></span>
                <span>Remove Item</span>
            </button>
        </div>
    }
</div>


@code {
    [Parameter]
    public Budget BudgetItem { get; set; }
    [Parameter]
    public string IconColor { get; set; }
    [Parameter]
    public EventCallback OnUpdateAll { get; set; }
    private bool showDetails = false;

    public int CalculateAmount()
    {
        int sharedAmount = BudgetItem.Amount * BudgetItem.SharedPercentage / 100;
        return sharedAmount;
    }
    private void ToggleDetails()
    {
        showDetails = !showDetails;
    }
    private async Task RemoveItem()
    {
        await BudgetRepository.RemoveBudgetItem(BudgetItem.Id);
        await OnUpdateAll.InvokeAsync();
    }
}
