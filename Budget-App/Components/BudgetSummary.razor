<div class="wrapper">
    <div class="title">
        <h2>Budget Summary</h2>
    </div>
    <div class="summary-body">
        <div class="radial-guage">
             <RadialGuage SectionData="Sections" IncomeData="IncomeItems" ExpenseData="ExpenseItems" />
        </div>
    @foreach (var section in Sections)
    {
        var expensesInSection = BudgetItems
        .Where(x => x.SectionId == section.Id && x.Type == "Expense" && x.IsActive == true)
        .Sum(x => (x.Amount * x.SharedPercentage / 100));

        if (expensesInSection > 0)
        {
            <div class="section">
                <span class="section-color" style="background-color: @(section.SectionColor)"></span>
                <div class="section-name">
                    @(section.SectionName)
                </div>
                <div class="section-divider"></div>
                <div class="section-percentage"> @expensesInSection kr</div>
            </div>
        }
    }
        <div class="section">
            <span class="section-color" style="background-color: @(CalculateRemainingIncome() >= 0 ? "#7DCD85" : "#b20000")"></span>
            <div class="section-name">
                Remaining assets
            </div>
            <div class="section-divider"></div>
            <div class="section-percentage"> @CalculateRemainingIncome() kr</div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public IEnumerable<Models.Section> Sections { get; set; }
    [Parameter]
    public IEnumerable<Models.Budget> BudgetItems { get; set; }
    [Parameter]
    public IEnumerable<Models.Budget> IncomeItems { get; set;}
    [Parameter]
    public IEnumerable<Models.Budget> ExpenseItems { get; set;}

    private int CalculateRemainingIncome()
    {
        int income = IncomeItems.Where(x => x.IsActive == true).Sum(x => x.Amount);
        int expense = ExpenseItems.Where(x => x.IsActive == true).Sum(x => (x.Amount * x.SharedPercentage / 100));
        int remaining = income - expense;
        return remaining;
    }
}
