@inject IJSRuntime JSRuntime

<div class="modal" style="display: @(IsVisible ? "block" : "none")">
    <div class="modal-content">
        <div class="modal-top">
            <h2>Add budget item</h2>
            <span class="close" @onclick="CloseModal">&times;</span>
        </div>
        
        <div class="form-body">
            <EditForm Model=@BudgetItem OnValidSubmit="AddItemToBudget">
            <DataAnnotationsValidator />
                <div class="form-floating mb-2">
                    <InputText class="form-control" id="name" name="name" placeholder="Doggy daycare" @bind-Value=BudgetItem.Name />
                    <label for="name">Name</label>
                    <ValidationMessage For="() => BudgetItem.Name" />
                </div>
                <div class="form-floating mb-3">
                    <InputNumber class="form-control" id="amount" name="amount" placeholder="3000" @bind-Value=BudgetItem.Amount />
                    <label for="number">Amount</label>
                    <ValidationMessage For="() => BudgetItem.Amount" />
                </div>
                <div class="form-floating mb-3">
                    <div class="btn-group" role="group" aria-label="Type selection">
                        <InputRadioGroup id="type" name="type" @bind-Value=BudgetItem.Type>
                            @foreach (var type in Types)
                            {
                                <InputRadio class="btn-check" Value=type id=@($"type-{type}-{SectionData.Id}") />
                                <label class="btn btn-outline-secondary" for=@($"type-{type}-{SectionData.Id}")>@type</label>
                            }
                        </InputRadioGroup>
                    </div>
                </div>
                @if(BudgetItem.Type == "Expense")
                {
                    <div class="form-floating mb-3">
                        <div class="btn-group" role="group" aria-label="Type selection">
                            <InputRadioGroup id="shared" name="shared" @bind-Value=BudgetItem.IsShared>     
                                <InputRadio class="btn-check" Value=false id=@($"isNotShared-{SectionData.Id}") />
                                <label class="btn btn-outline-secondary" for=@($"isNotShared-{SectionData.Id}")>Personal</label>
                                <InputRadio class="btn-check" Value=true id=@($"isShared-{SectionData.Id}") />
                                <label class="btn btn-outline-secondary" for=@($"isShared-{SectionData.Id}")>Shared</label>                          
                            </InputRadioGroup>
                        </div>
                    </div>
                }
                @if(BudgetItem.IsShared == true)
                {
                    <div class="form-floating mb-3">
                        <InputNumber class="form-control" id="sharedPercentage" name="sharedPercentage" placeholder="50" @bind-Value=BudgetItem.SharedPercentage />
                        <label for="number">Percentage you will pay</label>
                        <ValidationMessage For="() => BudgetItem.SharedPercentage" />
                    </div>
                }
                <div class="form-floating mb-3">
                    <div class="icon-picker">
                        <div class="displayed-icon" @onclick="CloseButtonPicker">
                            <Icon IconClass="@BudgetItem.IconClass" IconColor="@SectionData.SectionColor" IsEventSet="true" />
                        </div>
                        <div class="icon-clicker">
                            <IconSelector IconWindowName="@IconWindowName" OnIconSelected="SetIcon" IconColor="@SectionData.SectionColor" />
                        </div>
                    </div>
                </div>
                <div class="form-row">
                    <button class="btn btn-success" type="submit">
                        <span class="oi oi-plus"></span>
                        <span>Add item</span>
                    </button>
                </div>
        </EditForm>
        </div>
    </div>
</div>

@code{
    [Parameter] 
    public bool IsVisible { get; set; }
    [Parameter] 
    public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter]
    public Models.Section SectionData { get; set; }
    [Parameter]
    public EventCallback OnModalFinish { get; set; }
    public EventCallback<string> IconSelected { get; set; }
    private bool collapseButtonPicker = true;
    private string IconWindowName => collapseButtonPicker ? "icon-window-inactive" : "icon-window-active";
    public enum BudgetType
    {
        Income,
        Expense
    }
    BudgetItem BudgetItem = new BudgetItem
    {
            Type = BudgetType.Income.ToString(),
            IconClass = "fa-solid fa-icons"
    };
    List<String> Types = new List<string> { BudgetType.Income.ToString(), BudgetType.Expense.ToString() };

    private void CloseModal()
    {
        IsVisible = false;
        IsVisibleChanged.InvokeAsync(false);
        JSRuntime.InvokeVoidAsync("toggleBodyScrolling", true);
    }

    private void CloseButtonPicker()
    {
        collapseButtonPicker = !collapseButtonPicker;
    }

    private async Task SetIcon(string iconClass)
    {
        BudgetItem.IconClass = iconClass;
        CloseButtonPicker();
        await IconSelected.InvokeAsync(iconClass);
    }

    private async Task AddItemToBudget()
    {
            string name = BudgetItem.Name;
            int amount = BudgetItem.Amount;
            int id = SectionData.Id;
            bool isShared = BudgetItem.IsShared;
            string type = BudgetItem.Type;
            int sharedPercentage = BudgetItem.IsShared == true ? BudgetItem.SharedPercentage : 100;
            string IconName = BudgetItem.IconClass;

            await BudgetRepository.AddBudgetItem(name, amount, isShared, type, sharedPercentage,IconName, id);

            BudgetItem.Name = "";
            BudgetItem.Amount = 0;
            BudgetItem.IsShared = false; 
            BudgetItem.Type = BudgetType.Income.ToString();
            BudgetItem.IconClass = "fa-solid fa-icons";
            BudgetItem.SharedPercentage = 100;

            await OnModalFinish.InvokeAsync();
            CloseModal();
    }
}

