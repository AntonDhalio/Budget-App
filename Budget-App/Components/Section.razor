@inject IJSRuntime JSRuntime

<div class="wrapper">
    <div class="section-head">
        <div class="section-title">
            <h3>@SectionData.SectionName</h3>
        </div>
        <div class="section-remove">
            @if (!items.Any())
            {
                <button type="button" class="btn-close" aria-label="Close" @onclick="RemoveSection"></button>
            }
        </div>
    </div>
    <div class="budget-items">
        @if (items.Any())
        {
            foreach(var item in items)
            {
                <Item BudgetItem="item" IconColor="@SectionData.SectionColor" OnUpdateAll="OnUpdateAll"/>
            }
        }
    </div>
    <div class="budget-add-item">
        <div class="d-grid gap-2 col-8 mx-auto">
            <button class="btn btn-outline-success border-0" type="button" @onclick="ShowModal">
                <span class="oi oi-plus"></span>
                <span>Add Item</span>
            </button>
        </div>
        <AddItemModal SectionData="SectionData" OnModalFinish="UpdateBudgetItems" @ref="modal" @bind-IsVisible="modalVisible" />
    </div>
    <script>
        function toggleBodyScrolling(enableScroll) {
            const body = document.body;
            if (enableScroll) {
                body.style.overflow = 'auto';
            } else {
                body.style.overflow = 'hidden';
            }
        }
    </script>
</div>

@code {
    [Parameter]
    public Models.Section SectionData { get; set; }
    [Parameter]
    public EventCallback<Models.Section> OnUpdateSection { get; set; }
    [Parameter]
    public EventCallback OnUpdateAll { get; set; }
    private IEnumerable<Models.Budget> items = Enumerable.Empty<Models.Budget>();
    private bool modalVisible = false;
    private AddItemModal modal;

    private void ShowModal()
    {
        modalVisible = true;
        JSRuntime.InvokeVoidAsync("toggleBodyScrolling", false);
    }

    protected override async Task OnInitializedAsync()
    {
        items = await FetchBudgetItems();
    }

    private async Task RemoveSection()
    {
        await BudgetRepository.RemoveSection(SectionData.Id);
        await OnUpdateSection.InvokeAsync();
    }

    private async Task UpdateBudgetItems()
    {
        items = await FetchBudgetItems();
        await OnUpdateAll.InvokeAsync();
    }

    private async Task<IEnumerable<Models.Budget>> FetchBudgetItems()
    {
        var allItems = await BudgetRepository.GetAllBudgetItems();
        var filteredItems = allItems.Where(item => item.SectionId == SectionData.Id);
        return filteredItems;
    }
}
