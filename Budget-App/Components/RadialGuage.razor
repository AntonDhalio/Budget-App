<div class="wrapper">

    <IgbRadialGauge
                    Height="100%" Width="100%"
                    MinimumValue=0
                    MaximumValue=maximumValue

                    ScaleStartAngle=120
                    ScaleEndAngle=60
                    ScaleBrush="transparent"
                    ScaleSweepDirection=SweepDirection.Clockwise

                    BackingOutline="transparent" 
                    BackingBrush="transparent" 
                    BackingShape=RadialGaugeBackingShape.Circular
                    
                    NeedleEndExtent=0.8
                    NeedleShape=RadialGaugeNeedleShape.None
                    NeedlePivotShape=RadialGaugePivotShape.None
                    NeedlePivotWidthRatio=0.1
                    NeedleBrush="#79797a" 
                    NeedleOutline="#79797a" 

                    TickStartExtent="0.69"
                    TickEndExtent="0.75"
                    TickStrokeThickness="0.5"
                    TickBrush="black" 
                    MinorTickBrush="transparent" 

                    LabelExtent=0.9
                    Font="12px Verdana,Arial" 


                    >
                    @for (int i = 0; i < RangeInfo.Count; i++)
                        {
                            GaugeRangeInfo info = RangeInfo[i];
                            <IgbRadialGaugeRange StartValue=@info.StartValue
                                              EndValue=@info.EndValue
                                              InnerStartExtent=@info.InnerStartExtent
                                              InnerEndExtent=@info.InnerEndExtent
                                              OuterStartExtent=@info.OuterStartExtent
                                              OuterEndExtent=@info.OuterEndExtent
                                              Brush="@info.Brush"
                                              Outline="@info.Outline">
                            </IgbRadialGaugeRange>
                        }
    </IgbRadialGauge>
    
</div>

@code {
    [Parameter]
    public IEnumerable<Budget> IncomeData { get; set; }
    [Parameter]
    public IEnumerable<Models.Section> SectionData { get; set; }
    [Parameter]
    public IEnumerable<Budget> ExpenseData { get; set; }
    public IEnumerable<Budget> SectionItems { get; set; }
    private System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo> RangeInfo = new System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo>();
    private int currentEndValue { get; set; } = 0;
    private int maximumValue { get; set; }
    private bool isInitializing = false;
    private SemaphoreSlim semaphore = new SemaphoreSlim(1, 1);

    protected override async Task OnInitializedAsync()
    {
        await InitializeRangeInfo();
    }

    protected override async Task OnParametersSetAsync()
    {
        await InitializeRangeInfo();
    }

    private async Task InitializeRangeInfo()
    {
        await semaphore.WaitAsync();

        try
        {
            if (!isInitializing)
            {
                isInitializing = true;
                RangeInfo.Clear();
                currentEndValue = 0;
                maximumValue = CalculateRemainingIncome() >= 0 ? IncomeData.Where(x => x.IsActive == true).Sum(x => x.Amount) : ExpenseData.Where(x => x.IsActive == true).Sum(x => (x.Amount * x.SharedPercentage / 100));

                foreach (var section in SectionData)
                {
                    SectionItems = await BudgetRepository.GetBudgetItemsBySection(section.Id);
                    int expenses = SectionItems.Where(x => x.Type == "Expense" && x.IsActive == true).Sum(x => (x.Amount * x.SharedPercentage / 100));               
                    expenses = Math.Abs(expenses);                    
                    GaugeRangeInfo range = new GaugeRangeInfo()
                        {
                            Brush = section.SectionColor,
                            Outline = "black",
                            StartValue = currentEndValue,
                            EndValue = currentEndValue + expenses,
                            InnerStartExtent = 0.3,
                            InnerEndExtent = 0.3,
                            OuterStartExtent = 0.7,
                            OuterEndExtent = 0.7
                        };
                    currentEndValue += expenses;
                    RangeInfo.Add(range);
                }
                int positives = CalculateRemainingIncome();
                @if(positives >= 0)
                {
                    GaugeRangeInfo range2 = new GaugeRangeInfo()
                        {
                            Brush = "#7DCD85",
                            Outline = "black",
                            StartValue = currentEndValue,
                            EndValue = currentEndValue + positives,
                            InnerStartExtent = 0.3,
                            InnerEndExtent = 0.3,
                            OuterStartExtent = 0.7,
                            OuterEndExtent = 0.7
                        };
                    currentEndValue += positives;
                    RangeInfo.Add(range2);
                }
                isInitializing = false;
            }
        }
        finally
        {
            semaphore.Release();
        }
    }

    private int CalculateRemainingIncome()
    {
        int income = IncomeData.Where(x => x.IsActive == true).Sum(x => x.Amount);
        int expense = ExpenseData.Where(x => x.IsActive == true).Sum(x => (x.Amount * x.SharedPercentage / 100));
        int remaining = income - expense;
        return remaining;
    }
}
